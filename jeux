#include <iostream>
#include <cstdlib>
#include <conio.h>
#include <time.h>

using namespace std;

#define NROW 11
#define NCOL 21

void Affiche(char T[][NCOL])
{
    //on efface la console
    system("cls");

    //on affiche tout le tableau
    for(int x = 0; x < NROW; x++){
        for(int y = 0; y < NCOL; y++)
            cout << T[x][y];
        cout << endl;
    }
}

int main(int argc, char**argv){


    //allocation statique d'une matrice de caractères
    char T[NROW][NCOL];

    //on remplit avec ' ' partout
    //une instruction par niveau de boucle --> pas besoin de { }
    for (int i=0; i<NROW; i++)
        for (int j=0; j<NCOL; j++)
            T[i][j] =' ';

		srand(time(NULL));
		int nb_obstacles = rand()%(16 - 1) + 1;//On génère aléatoirement le nb d'obstacles de 1 à 15
		//int nb_obstacles = 30;
		int obstacle_colonne[ nb_obstacles ];
		int obstacle_ligne[ nb_obstacles ];

		for (int i=0; i< nb_obstacles; i++){
			obstacle_colonne[i] = (rand()%(10 - 1) + 1)*2;//On génère aléatoirement les colonnes des obstacles sur les colonnes paires
			obstacle_ligne[i]   = (rand()%(5 - 1) + 1)*2;//On génère aléatoirement les lignes des obstacles sur les lignes paires
			T[obstacle_ligne[i]][obstacle_colonne[i]] ='O';
		}


    for (int i=0; i<NROW; i++)
            T[i][0] ='X';

		for (int i=0; i<NROW; i++)
            T[i][20] ='X';

		for (int i=0; i<NCOL; i++)
            T[0][i] ='X';

		for (int i=0; i<NCOL; i++)
            T[10][i] ='X';

    //On met des croix sur les côtés


    //initialisation position et valeur dans le tableau
    int row = 5, col=10;
    T[row][col] = 1;

    //on affiche une première fois
    Affiche (T);

    //on récupère la valeur unicode de la touche pressée tant qu'on n'apppuie pas sur ENTREE
    int touche = - 1;
    while (touche != 13)    {

        touche = getch();
        //cout << touche <<endl;
        //system("pause");
        //préférer la structure switch si on a plus de 3 cas

        switch (touche) {

        case 75 : { // Appui sur la flèche gauche
		if(col == 1){//Si on arrive sur un mur à gauche
		break;
		}

		for (int i=0; i< nb_obstacles; i++){
		if(col == obstacle_colonne[i]+1 && row == obstacle_ligne[i] ){//Si on arrive sur un obstacle
		//col = col + 1;
		goto obstacle;
		}
		}

        	T[ row  ][ col-1 ] = 1;
        	T[ row  ][ col ] = ' ';
        	col--; // source de bug en cas de dépassement
        	} break;

        case 77 : { // Appui sur la flèche droite
		if(col == 19){ //Si on arrive sur un mur à droite
		break;
		}

		for (int i=0; i< nb_obstacles; i++){
		if(col == obstacle_colonne[i]-1 && row == obstacle_ligne[i] ){//Si on arrive sur un obstacle
		//col = col - 1;
		goto obstacle;
		}
		}

        	T[ row  ][ col+1 ] = 1;
        	T[ row  ][ col ] = ' ';
            	col ++; // source de bug en cas de dépassement
           	}break;

        case 72 : { //Appui sur la flèche haut
		if(row == 1){//Si on arrive sur un mur en haut
		break;
		}

		for (int i=0; i< nb_obstacles; i++){
		if(col == obstacle_colonne[i] && row == obstacle_ligne[i]+1 ){//Si on arrive sur un obstacle
		//row = row + 1;
		goto obstacle;
		}
		}

            	T[ row - 1  ][ col ] = 1;
            	T[ row  ][ col ] = ' ';
            	row--;// source de bug en cas de dépassement
            	} break;

        case 80 :{ //Appui sur la flèche du bas
		if(row == 9){//Si on arrive sur un mur en bas
		break;
		}

		for (int i=0; i< nb_obstacles; i++){
		if(col == obstacle_colonne[i] && row == obstacle_ligne[i]-1 ){//Si on arrive sur un obstacle
		//row = row - 1;
		goto obstacle;
		}
		}

            	T[ row + 1  ][ col ] = 1;
            	T[ row  ][ col ] = ' ';
            	row++;// source de bug en cas de dépassement
            	}break;

        }// fin switch
        obstacle:

        Affiche(T);


    }// fin while


    system("PAUSE");
    return EXIT_SUCCESS;

}
